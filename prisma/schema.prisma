// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id         Int      @id @default(autoincrement())
  nome       String
  email      String   @unique
  senha      String
  criadoEm   DateTime @default(now())
  alteradoEm DateTime @default(now())

  Token      Token[]
  Produto    Produto[]
  Servico    Servico[]
  Cliente    Cliente[]
  Quarto     Quarto[]
  Hospedagem Hospedagem[]

  @@map("usuarios")
}

model Produto {
  id         Int      @id @default(autoincrement())
  nome       String
  preco      Float
  criadoEm   DateTime @default(now())
  alteradoEm DateTime @default(now())

  Usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId Int?

  ProdutosHospedagem ProdutosHospedagem[]

  @@map("produtos")
}

model Servico {
  id         Int      @id @default(autoincrement())
  nome       String
  preco      Float
  criadoEm   DateTime @default(now())
  alteradoEm DateTime @default(now())

  Usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId Int?

  ServicosHospedagem ServicosHospedagem[]

  @@map("servicos")
}

model Token {
  token        String    @id
  usuarioId    Int?
  criadoEm     DateTime  @default(now())
  dataExclusao DateTime?

  usuario Usuario? @relation(fields: [usuarioId], references: [id])

  @@map("tokens")
}

model Cliente {
  id         Int       @id @default(autoincrement())
  cpfCnpj    String?   @unique
  nome       String
  email      String?   @unique
  telefone   String
  dataNasc   DateTime?
  criadoEm   DateTime  @default(now())
  alteradoEm DateTime  @default(now())

  Usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId Int?

  Hospedagem Hospedagem[]

  @@map("clientes")
}

model Quarto {
  id            Int      @id @default(autoincrement())
  identificacao Int
  tipo          String?
  diaria        Float
  status        Int      @default(0)
  criadoEm      DateTime @default(now())
  alteradoEm    DateTime @default(now())

  Usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId Int?

  Hospedagem Hospedagem[]

  @@map("quartos")
}

model ProdutosHospedagem {
  id           Int    @id @default(autoincrement())
  hospedagemId Int
  produtoId    Int
  produtoNome  String
  produtoPreco Float

  quantidade Int
  criadoEm   DateTime @default(now())
  alteradoEm DateTime @default(now())

  Hospedagem Hospedagem @relation(fields: [hospedagemId], references: [id])
  Produto    Produto    @relation(fields: [produtoId], references: [id])

  @@map("produtos_hospedagem")
}

model ServicosHospedagem {
  id           Int    @id @default(autoincrement())
  hospedagemId Int
  servicoId    Int
  servicoNome  String
  servicoPreco Float

  quantidade Int
  criadoEm   DateTime @default(now())
  alteradoEm DateTime @default(now())

  Hospedagem Hospedagem @relation(fields: [hospedagemId], references: [id])
  Servico    Servico    @relation(fields: [servicoId], references: [id])

  @@map("servicos_hospedagem")
}

model Hospedagem {
  id          Int       @id @default(autoincrement())
  clienteId   Int
  quartoId    Int
  usuarioId   Int
  dataEntrada DateTime
  dataSaida   DateTime?
  observacao  String?
  criadoEm    DateTime  @default(now())
  alteradoEm  DateTime  @default(now())

  Usuario Usuario @relation(fields: [usuarioId], references: [id])
  Cliente Cliente @relation(fields: [clienteId], references: [id])
  Quarto  Quarto  @relation(fields: [quartoId], references: [id])

  ProdutosHospedagem ProdutosHospedagem[]
  ServicosHospedagem ServicosHospedagem[]

  @@map("hospedagens")
}
